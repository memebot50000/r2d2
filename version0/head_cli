from flask import Flask, Response, render_template_string
import cv2
import numpy as np
import time
import os
from gpiozero import Motor
import threading

app = Flask(__name__)

# Face detection setup
cascade_path = "/usr/share/opencv4/haarcascades/haarcascade_frontalface_default.xml"
if not os.path.isfile(cascade_path):
    print(f"Error: Cascade file not found at {cascade_path}")
    exit()
face_cascade = cv2.CascadeClassifier(cascade_path)

# Camera setup
camera = cv2.VideoCapture(0, cv2.CAP_V4L2)
if not camera.isOpened():
    print("Error: Could not open camera.")
    exit()
camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
camera.set(cv2.CAP_PROP_HEIGHT, 480)

# Head motor setup
class ServoLikeMotor:
    def __init__(self, motor, max_power=1.0, travel_time=2.2):
        self.motor = motor
        self.max_power = max_power
        self.travel_time = travel_time
        self.current_position = 0.5
        self.target_position = 0.5

    def set_position(self, position):
        self.target_position = max(0, min(1, position))

    def update(self, duration):
        start_time = time.time()
        while time.time() - start_time < duration:
            if self.current_position != self.target_position:
                direction = 1 if self.target_position > self.current_position else -1
                speed = 0.1 * self.max_power * direction
                time_step = 0.01
                position_change = (time_step / self.travel_time) * direction
                self.current_position += position_change
                self.current_position = max(0, min(1, self.current_position))
                if direction > 0:
                    self.motor.forward(abs(speed))
                else:
                    self.motor.backward(abs(speed))
            else:
                self.motor.stop()
            time.sleep(0.01)
        self.motor.stop()

head_motor_raw = Motor(forward=5, backward=6, enable=26)
head_motor = ServoLikeMotor(head_motor_raw)

# Optical flow parameters
feature_params = dict(maxCorners=100, qualityLevel=0.3, minDistance=7, blockSize=7)
lk_params = dict(winSize=(15, 15), maxLevel=2, criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))
color = np.random.randint(0, 255, (100, 3))

# Global variables
prev_frame = None
prev_points = None

def generate_frames():
    global prev_frame, prev_points
    while True:
        ret, frame = camera.read()
        if not ret:
            break
        
        frame = cv2.flip(frame, -1)  # Flip for upside-down camera
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Face detection
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        
        if len(faces) > 0:
            for (x, y, w, h) in faces:
                cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                cv2.drawMarker(frame, (x, y), (0, 255, 0), cv2.MARKER_CROSS, 10, 2)
                cv2.drawMarker(frame, (x+w, y), (0, 255, 0), cv2.MARKER_CROSS, 10, 2)
                cv2.drawMarker(frame, (x, y+h), (0, 255, 0), cv2.MARKER_CROSS, 10, 2)
                cv2.drawMarker(frame, (x+w, y+h), (0, 255, 0), cv2.MARKER_CROSS, 10, 2)
            prev_points = None
        else:
            # Optical flow
            if prev_frame is not None:
                if prev_points is None:
                    prev_points = cv2.goodFeaturesToTrack(prev_frame, mask=None, **feature_params)
                
                if prev_points is not None:
                    next_points, status, _ = cv2.calcOpticalFlowPyrLK(prev_frame, gray, prev_points, None, **lk_params)
                    
                    if next_points is not None:
                        good_new = next_points[status == 1]
                        good_old = prev_points[status == 1]
                        
                        for i, (new, old) in enumerate(zip(good_new, good_old)):
                            a, b = new.ravel()
                            c, d = old.ravel()
                            frame = cv2.line(frame, (int(a), int(b)), (int(c), int(d)), color[i].tolist(), 2)
                            frame = cv2.circle(frame, (int(a), int(b)), 5, color[i].tolist(), -1)
                    
                    prev_points = good_new.reshape(-1, 1, 2)
        
        prev_frame = gray
        
        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/')
def index():
    return render_template_string('''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Face Detection and Optical Flow Stream</title>
    </head>
    <body>
        <h1>Face Detection and Optical Flow Stream</h1>
        <img src="{{ url_for('video_feed') }}" width="640" height="480" />
    </body>
    </html>
    ''')

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

def head_motor_control():
    print("Head motor control ready. Enter commands in the following format:")
    print("power duration")
    print("power is a float between -1 and 1 (-1 for full left, 1 for full right)")
    print("duration is the time in seconds")
    print("Enter 'quit' to exit the program")

    while True:
        command = input("Enter command: ").lower().split()
        
        if command[0] == 'quit':
            break
        
        if len(command) != 2:
            print("Invalid command format. Please try again.")
            continue
        
        power, duration = command
        
        try:
            power = float(power)
            duration = float(duration)
            
            if power < -1 or power > 1:
                print("Power must be between -1 and 1")
                continue
            
            if duration < 0:
                print("Duration must be positive")
                continue
            
            position = (power + 1) / 2
            head_motor.set_position(position)
            head_motor.update(duration)
            print(f"Moved head motor to position {position:.2f} for {duration:.2f} seconds")
        
        except ValueError:
            print("Invalid power or duration value. Please enter numbers.")

if __name__ == '__main__':
    try:
        print("Starting head motor control interface...")
        motor_thread = threading.Thread(target=head_motor_control, daemon=True)
        motor_thread.start()
        print("Head motor control interface started")
        app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False, threaded=True)
    except KeyboardInterrupt:
        print("\nProgram interrupted by user. Exiting...")
    finally:
        print("Stopping head motor and releasing camera")
        head_motor.motor.stop()
        camera.release()
